{"version":3,"sources":["images/spotify/green-logo.png","images/lost-harbor-music/lhm-document-logo.png","services/getArtist.js","components/ArtistInfoById.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getArtistById","artistId","a","url","process","fetch","method","headers","res","json","console","error","ArtistInfoById","useState","setArtistId","popularity","setPopularity","src","setSrc","genres","setGenres","onSubmit","e","preventDefault","images","htmlFor","type","id","name","value","onChange","target","length","map","genre","key","links","href","text","App","className","lostHarborMusicLogo","alt","link","greenLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,wLCA9BC,EAAa,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,sEAEfC,EAFe,UAENC,qEAFM,sBAEwCH,GAFxC,SAGHI,MAAMF,EAAK,CACzBG,OAAQ,MACRC,QAAS,CAAE,YAAaH,8CALP,cAGfI,EAHe,gBAOFA,EAAIC,OAPF,cAOfA,EAPe,yBAQdA,GARc,kCAUrBC,QAAQC,MAAR,MAVqB,0DAAH,sDCyCXC,EAtCQ,WAAO,IAAD,EACOC,mBAAS,0BADhB,mBAClBZ,EADkB,KACRa,EADQ,OAEWD,mBAAS,MAFpB,mBAElBE,EAFkB,KAENC,EAFM,OAGHH,mBAAS,IAHN,mBAGlBI,EAHkB,KAGbC,EAHa,OAIGL,mBAAS,IAJZ,mBAIlBM,EAJkB,KAIVC,EAJU,KAMnBC,EAAQ,uCAAG,WAAMC,GAAN,qBAAApB,EAAA,6DACfoB,EAAEC,iBADa,SAE8BvB,EAAcC,GAF5C,gBAEPc,EAFO,EAEPA,WAAYS,EAFL,EAEKA,OAAQL,EAFb,EAEaA,OACxBJ,GAAcS,GAAUL,IAC1BH,EAAcD,GACdG,EAAOM,EAAO,GAAGrB,KACjBiB,EAAUD,IANG,2CAAH,sDASd,OACE,oCACE,0BAAME,SAAUA,GACd,2BAAOI,QAAQ,YACb,8CACA,2BAAOC,KAAK,OAAOC,GAAG,YAAYC,KAAK,WAAWC,MAAO5B,EAAU6B,SAf1D,SAAAR,GAAC,OAAIR,EAAYQ,EAAES,OAAOF,WAiBrC,2BAAOH,KAAK,SAASC,GAAG,SAASE,MAAM,QAEzB,OAAfd,GAAuB,0CAAgBA,GACvCE,EAAIe,OAAS,GAAK,2BAAG,yBAAKf,IAAKA,KAC/BE,EAAOa,OAAS,GAAK,uCACrBb,EAAOa,OAAS,GACjB,4BACGb,EAAOc,KAAI,SAAAC,GAAK,OACf,wBAAIC,IAAKD,GAAQA,S,gCC3BvBE,G,MAAQ,CACZ,CACEC,KAAM,mCACNC,KAAM,QACN,CACAD,KAAM,6CACNC,KAAM,eACN,CACAD,KAAM,mDACNC,KAAM,eAyBKC,EArBH,kBACV,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKb,GAAG,gBACN,uBAAGU,KAAK,oCACN,yBAAKpB,IAAKwB,IAAqBC,IAAI,yBAAyBf,GAAG,eAGlES,EAAMH,KAAI,SAAAU,GAAI,OACb,uBAAGN,KAAMM,EAAKN,KAAMF,IAAKQ,EAAKL,KAAME,UAAU,YAC3CG,EAAKL,UAIZ,yBAAKE,UAAU,QACb,kBAAC,EAAD,MACA,yBAAKvB,IAAK2B,IAAWF,IAAI,eAAef,GAAG,oBCvB7BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLD,QAAQC,MAAMA,EAAMmD,c","file":"static/js/main.60b57fa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/green-logo.11dc437a.png\";","module.exports = __webpack_public_path__ + \"static/media/lhm-document-logo.05c02bd4.png\";","export const getArtistById = async artistId => {\n    try {\n        const url = `${process.env.REACT_APP_API_GW_URL}?artist_id=${artistId}`;\n        const res = await fetch(url, {\n            method: 'GET',\n            headers: { 'X-Api-Key': process.env.REACT_APP_X_API_KEY },\n        });\n        const json = await res.json();\n        return json;\n    } catch (e) {\n        console.error(e);\n    }\n}\n","import React, { useState } from 'react';\nimport { getArtistById } from '../services/getArtist';\n\nconst ArtistInfoById = () => {\n    const [artistId, setArtistId] = useState('5TBdr1d9ZJ5YMhsxiF1Jo7');\n    const [popularity, setPopularity] = useState(null);\n    const [src, setSrc] = useState('');\n    const [genres, setGenres] = useState([]);\n    const onChange = e => setArtistId(e.target.value);\n    const onSubmit = async e => {\n      e.preventDefault();\n      const { popularity, images, genres } = await getArtistById(artistId);\n      if (popularity && images && genres) {\n        setPopularity(popularity);\n        setSrc(images[2].url);\n        setGenres(genres);\n      }\n    }\n    return (\n      <>\n        <form onSubmit={onSubmit}>\n          <label htmlFor=\"artistId\">\n            <p>Enter Artist Id</p>\n            <input type=\"text\" id=\"artist-id\" name=\"artistId\" value={artistId} onChange={onChange} />\n          </label>\n          <input type=\"submit\" id=\"submit\" value=\"Go\" />\n        </form>\n        {popularity !== null && <p>Popularity: {popularity}</p>}\n        {src.length > 0 && <p><img src={src} /></p>}\n        {genres.length > 0 && <p>Genres: </p>}\n        {genres.length > 0 &&\n        <ul>\n          {genres.map(genre => (\n            <li key={genre}>{genre}</li>\n          ))}\n        </ul>\n        }\n      </>\n    );\n  }\n\nexport default ArtistInfoById;\n","import React from 'react';\nimport ArtistInfoById from './components/ArtistInfoById';\nimport greenLogo from './images/spotify/green-logo.png';\nimport lostHarborMusicLogo from './images/lost-harbor-music/lhm-document-logo.png';\nimport './App.css';\n\nconst links = [\n  {\n    href: 'https://www.lostharbormusic.com/',\n    text: 'Home',\n  },{\n    href: 'https://www.lostharbormusic.com/fieldnotes',\n    text: 'Field Notes',\n  },{\n    href: 'https://pkrisko.github.io/get-artist-popularity/',\n    text: 'Utilities',\n  }\n]\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <div id=\"logo-wrapper\">\n        <a href=\"https://www.lostharbormusic.com/\">\n          <img src={lostHarborMusicLogo} alt=\"Lost Harbor Music Logo\" id=\"lhm-logo\" />\n        </a>\n      </div>\n      {links.map(link => (\n        <a href={link.href} key={link.text} className=\"nav-link\">\n          {link.text}\n        </a>\n      ))}\n    </header>\n    <div className=\"main\">\n      <ArtistInfoById />\n      <img src={greenLogo} alt=\"Spotify Logo\" id=\"spotify-logo\" />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}