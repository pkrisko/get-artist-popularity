{"version":3,"sources":["getArtist.js","App.js","serviceWorker.js","index.js"],"names":["getArtistById","artistId","a","url","process","fetch","method","headers","res","json","console","error","ArtistId","useState","setArtistId","popularity","setPopularity","src","setSrc","genres","setGenres","onSubmit","e","preventDefault","artist","images","htmlFor","type","name","value","onChange","target","length","map","genre","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"4NAAaA,EAAa,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,sEAEfC,EAFe,UAENC,qEAFM,sBAEwCH,GAFxC,SAGHI,MAAMF,EAAK,CACzBG,OAAQ,MACRC,QAAS,CAAE,YAAaH,8CALP,cAGfI,EAHe,gBAOFA,EAAIC,OAPF,cAOfA,EAPe,yBAQdA,GARc,kCAUrBC,QAAQC,MAAR,MAVqB,0DAAH,sDCIpBC,G,MAAW,WAAO,IAAD,EACWC,mBAAS,0BADpB,mBACdZ,EADc,KACJa,EADI,OAEeD,mBAAS,IAFxB,mBAEdE,EAFc,KAEFC,EAFE,OAGCH,mBAAS,IAHV,mBAGdI,EAHc,KAGTC,EAHS,OAIOL,mBAAS,IAJhB,mBAIdM,EAJc,KAINC,EAJM,KAMfC,EAAQ,uCAAG,WAAMC,GAAN,qBAAApB,EAAA,6DACfoB,EAAEC,iBADa,SAEMvB,EAAcC,GAFpB,OAETuB,EAFS,OAGPT,EAA+BS,EAA/BT,WAAYU,EAAmBD,EAAnBC,OAAQN,EAAWK,EAAXL,OACxBK,IACFR,EAAcD,GACdG,EAAOO,EAAO,GAAGtB,KACjBiB,EAAUD,IAPG,2CAAH,sDAUd,OAAO,oCACL,0BAAME,SAAUA,GACd,2BAAOK,QAAQ,YACb,8CACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,MAAO5B,EAAU6B,SAfzC,SAAAR,GAAC,OAAIR,EAAYQ,EAAES,OAAOF,UAgBrC,2BAAOF,KAAK,SAASE,MAAM,OAC3B,0CAAgBd,GACfE,EAAIe,OAAS,GAAK,2BAAG,yBAAKf,IAAKA,KAC/BE,EAAOa,OAAS,GAAK,uCACrBb,EAAOa,OAAS,GAAKb,EAAOc,KAAI,SAAAC,GAAK,OACpC,6BAAMA,WAeDC,EARH,kBACV,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SC5BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLD,QAAQC,MAAMA,EAAM2C,a","file":"static/js/main.3cf10f58.chunk.js","sourcesContent":["export const getArtistById = async artistId => {\n    try {\n        const url = `${process.env.REACT_APP_API_GW_URL}?artist_id=${artistId}`;\n        const res = await fetch(url, {\n            method: 'GET',\n            headers: { 'X-Api-Key': process.env.REACT_APP_X_API_KEY },\n        });\n        const json = await res.json();\n        return json;\n    } catch (e) {\n        console.error(e);\n    }\n}\n","import React, { useState } from 'react';\nimport { getArtistById } from './getArtist';\nimport './App.css';\n\nconst ArtistId = () => {\n  const [artistId, setArtistId] = useState('5TBdr1d9ZJ5YMhsxiF1Jo7');\n  const [popularity, setPopularity] = useState('');\n  const [src, setSrc] = useState('');\n  const [genres, setGenres] = useState([]);\n  const onChange = e => setArtistId(e.target.value);\n  const onSubmit = async e => {\n    e.preventDefault();\n    const artist = await getArtistById(artistId);\n    const { popularity, images, genres } = artist;\n    if (artist) {\n      setPopularity(popularity);\n      setSrc(images[2].url);\n      setGenres(genres);\n    }\n  }\n  return <>\n    <form onSubmit={onSubmit}>\n      <label htmlFor=\"artistId\">\n        <p>Enter Artist Id</p>\n        <input type=\"text\" name=\"artistId\" value={artistId} onChange={onChange} />\n        <input type=\"submit\" value=\"Go\" />\n        <p>Popularity: {popularity}</p>\n        {src.length > 0 && <p><img src={src} /></p>}\n        {genres.length > 0 && <p>Genres: </p>}\n        {genres.length > 0 && genres.map(genre => (\n          <div>{genre}</div>\n        ))}\n      </label>\n    </form>\n  </>\n}\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <ArtistId />\n    </header>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}